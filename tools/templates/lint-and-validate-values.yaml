imagePullSecret:
  create: true
  automaticReferenceInjection: true
  registry: R
  username: U
  email: e@domain.com
  password: P
imagePullSecrets: [a, b]

hub:
  revisionHistoryLimit: 1
  config:
    # We pin these to avoid generating changes which cause diffs
    ConfigurableHTTPProxy:
      auth_token: aaaa1111
    JupyterHub:
      cookie_secret: bbbb2222
    CryptKeeper:
      keys: [cccc3333]
  extraFiles:
    my_config:
      mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/my_config.py
      stringData: |
        with open("/tmp/created-by-extra-files-config.txt", "w") as f:
            f.write("hello world!")
    binaryData1: &binaryData1
      mountPath: /tmp/binaryData.txt
      mode: 0666
      binaryData: |
        aGVsbG8gd
        29ybGQhCg==
    binaryData2: &binaryData2
      mountPath: /tmp/dir1/binaryData.txt
      mode: 0666
      binaryData: aGVsbG8gd29ybGQhCg==
    stringData1: &stringData1
      mountPath: /tmp/stringData.txt
      mode: 0666
      stringData: hello world!
    stringData2: &stringData2
      mountPath: /tmp/dir1/stringData.txt
      mode: 0666
      stringData: hello world!
    data-yaml: &data-yaml
      mountPath: /etc/test/data.yaml
      mode: 0444
      data:
        config:
          map:
            number: 123
            string: "hi"
          list: [1, 2]
    data-yml: &data-yml
      <<: *data-yaml
      mountPath: /etc/test/data.yml
    data-json: &data-json
      <<: *data-yaml
      mountPath: /etc/test/data.json
    data-toml: &data-toml
      <<: *data-yaml
      mountPath: /etc/test/data.toml
  service:
    type: ClusterIP
    ports:
      nodePort:
    extraPorts:
      - name: dummy-port-1
        port: 8181
        targetPort: 8181
      - name: dummy-port-2
        port: 8182
        targetPort: string-named-target-port
  baseUrl: /
  activeServerLimit: 3
  deploymentStrategy:
    type: Recreate
    rollingUpdate:
  labels: &labels
    mock-label1-key: mock-label1-value
    mock-label2-key: mock-label2-value
  annotations: &annotations
    mock-annotation1-key: mock-annotation1-value
    mock-annotation2-key: mock-annotation2-value
  db:
    type: sqlite-pvc
    upgrade:
    pvc:
      annotations: *annotations
      accessModes:
        - ReadWriteOnce
      storage: 1Gi
      subPath: /mock
      storageClassName: custom-storage-class
    url: custom-db-url
  image: &image
    name: dummy-name
    tag: dummy-tag
    pullPolicy: Always
    pullSecrets: [c]
  initContainers:
    - name: mock-init-container-name
      image: mock-init-container-image
  command:
    - tini
  args:
    - jupyterhub
    - "--mock-flag"
    - "{{ .Values.hub.baseUrl }}"
  extraConfig:
    test: |-
      c.Spawner.cmd = 'mock'
  extraEnv: &extraEnv
    IGNORED_KEY_NAME:
      name: MOCK_ENV_VAR_NAME1
      value: MOCK_ENV_VAR_VALUE1
    MOCK_ENV_VAR_NAME2:
      value: MOCK_ENV_VAR_VALUE2
    MOCK_ENV_VAR_NAME3:
      valueFrom:
        secretKeyRef:
          name: my-k8s-secret
          key: my-k8s-secret-key
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  templatePaths:
    - /etc/jupyterhub/templates
  templateVars:
    announcement: "Some text"
    another_announcement: "Some more text"
  resources: &resources
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 200m
      memory: 1Gi
  lifecycle: &lifecycle
    postStart:
      exec:
        command:
          - "/bin/sh"
          - "-c"
          - "echo Hello from the postStart handler >> /usr/share/message"
    preStop:
      exec:
        command:
          - "/bin/sh"
          - "-c"
          - "echo Hello from the preStart handler >> /usr/share/message"
  services:
    test-service-1:
      apiToken: mocked-api-token
    test-service-2-key:
      name: test-service-2-name
      apiToken: mocked-api-token
    test-service-3: {}
    test-service-4:
      admin: true
      oauth_no_confirm: true
      oauth_roles: [dummy]
      info:
        key1: value1
  loadRoles:
    test-role-1:
      name: test-role-1
      description: Access to users' information and group membership
      scopes: [users, groups]
      users: [cyclops, gandalf]
      services: [test-service-1]
      groups: [test-group-1]
  pdb:
    enabled: true
    maxUnavailable: 1
    minAvailable: null
  networkPolicy:
    enabled: true
    egressAllowRules:
      cloudMetadataServer: true
      dnsPortsPrivateIPs: true
      nonPrivateIPs: true
      privateIPs: false
    egress:
      - to:
          - podSelector:
              matchLabels:
                app: my-k8s-local-service
        ports:
          - protocol: TCP
            port: 5978
    interNamespaceAccessLabels: ignore
    allowedIngressPorts: []
  allowNamedServers: true
  nodeSelector:
    node-type: mock
  tolerations:
    - key: mock-taint-key-hub
      operator: Equal
      value: mock-taint-value-hub
      effect: NoSchedule
  serviceAccount: &serviceAccount
    create: true
    name: mock-serviceaccount-name
    annotations: *annotations
  extraPodSpec: &extraPodSpec
    hostNetwork: true
    dnsPolicy: ClusterFirstWithHostNet

rbac:
  create: true

proxy:
  enabled: true
  service:
    extraPorts:
      - name: ssh
        port: 22
        targetPort: ssh
    type: LoadBalancer
    labels: *labels
    annotations: *annotations
    nodePorts:
      http:
      https:
  chp:
    revisionHistoryLimit: 1
    extraCommandLineFlags:
      - "--auto-rewrite"
      - "--mock-flag {{ .Values.proxy.chp.resources.requests.memory }}"
    resources: *resources
    defaultTarget: http://dummy.local/hello
    errorTarget: http://dummy.local/error
    extraEnv:
      - name: MOCK_ENV_VAR_NAME1
        value: MOCK_ENV_VAR_VALUE1
      - name: MOCK_ENV_VAR_NAME2
        valueFrom:
          secretKeyRef:
            name: my-k8s-secret
            key: my-k8s-secret-key
    nodeSelector:
      node-type: mock
    tolerations:
      - key: mock-taint-key-chp
        operator: Equal
        value: mock-taint-value-chp
        effect: NoSchedule
    networkPolicy:
      enabled: true
      egressAllowRules:
        cloudMetadataServer: false
        dnsPortsPrivateIPs: false
        nonPrivateIPs: false
        privateIPs: true
      egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
      interNamespaceAccessLabels: accept
      allowedIngressPorts: [http, https]
    pdb:
      enabled: true
      maxUnavailable: 1
      minAvailable: 1
    extraPodSpec: *extraPodSpec
  traefik:
    revisionHistoryLimit: 1
    labels: *labels
    resources: *resources
    extraEnv: *extraEnv
    nodeSelector:
      node-type: mock
    tolerations:
      - key: mock-taint-key-traefik
        operator: Equal
        value: mock-taint-value-traefik
        effect: NoSchedule
    networkPolicy:
      enabled: true
      egressAllowRules:
        cloudMetadataServer: false
        dnsPortsPrivateIPs: false
        nonPrivateIPs: true
        privateIPs: true
      egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
      interNamespaceAccessLabels: accept
      allowedIngressPorts: [http, https, ssh]
    pdb:
      enabled: true
      maxUnavailable: null
      minAvailable: 1
    serviceAccount: *serviceAccount
    extraPodSpec: *extraPodSpec
    extraPorts:
      - name: ssh
        containerPort: 8022
    extraStaticConfig:
      entryPoints:
        ssh:
          address: ":8022"
    extraDynamicConfig:
      tcp:
        services:
          ssh:
            loadBalancer:
              servers:
                - address: jupyterhub-ssh:22
        routers:
          ssh-router:
            entrypoints:
              - ssh
            rule: "HostSNI(`*`)"
            service: ssh
  secretSync:
    resources: *resources
  labels: *labels
  https:
    enabled: true
    type: letsencrypt
    #type: letsencrypt, manual, offload, secret
    letsencrypt:
      contactEmail: "e@domain.com"
    manual:
      key: mock-key
      cert: mock-cert
    secret:
      name: "mock-secret-name"
      key: "mock-key"
      crt: "mock-crt"
    hosts: [domain.com]

singleuser:
  profileList:
    - display_name: "mock display name 1"
      description: |
        mock description 1
      default: True
    - display_name: "mock display name 2"
      description: |
        mock description 2
      kubespawner_override:
        image: XYZ:XYZ
  nodeSelector:
    mock-node-selector: mock
  extraTolerations:
    - effect: NoSchedule
      key: mock-taint-key-singleuser
      operator: Equal
      value: mock-taint-value-singleuser
  extraNodeAffinity:
    required:
      - matchExpressions:
          - key: hub.jupyter.org/test-required-node
            operator: In
            values: [test]
    preferred:
      - weight: 10
        preference:
          matchExpressions:
            - key: hub.jupyter.org/test-preferred-node
              operator: In
              values: [test]
  extraPodAffinity:
    required:
      - labelSelector:
          matchExpressions:
            - key: hub.jupyter.org/test-required-pod
              operator: In
              values: [test]
        topologyKey: failure-domain.beta.kubernetes.io/zone
    preferred:
      - weight: 10
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: hub.jupyter.org/test-preferred-pod
                operator: In
                values: [test]
          topologyKey: kubernetes.io/hostname
  extraPodAntiAffinity:
    required:
      - labelSelector:
          matchExpressions:
            - key: hub.jupyter.org/test-required-anti-pod
              operator: In
              values: [test]
        topologyKey: failure-domain.beta.kubernetes.io/zone
    preferred:
      - weight: 10
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: hub.jupyter.org/test-preferred-anti-pod
                operator: In
                values: [test]
          topologyKey: kubernetes.io/hostname
  cloudMetadata:
    blockWithIptables: true
    ip: 169.254.169.254
  networkPolicy:
    enabled: true
    egressAllowRules:
      cloudMetadataServer: true
      dnsPortsPrivateIPs: true
      nonPrivateIPs: false
      privateIPs: false
    egress:
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
                - 169.254.169.254/32
    interNamespaceAccessLabels: ignore
    allowedIngressPorts: []
  events: true
  extraLabels: *labels
  extraEnv: *extraEnv
  lifecycleHooks: *lifecycle
  initContainers:
    - name: mock-init-container-name
      image: mock-init-container-image
      imagePullSecret: IfNotPresent
  extraContainers:
    - name: mock-extra-container-name
      image: mock-extra-container-image
      imagePullPolicy: IfNotPresent
  allowPrivilegeEscalation: false
  uid: 1000
  fsGid: 100
  serviceAccountName:
  storage:
    type: dynamic
    extraLabels: *labels
    extraVolumes: []
    extraVolumeMounts: []
    static:
      pvcName:
      subPath: "{username}"
    capacity: 10Gi
    homeMountPath: /home/jovyan
    dynamic:
      storageClass:
      pvcNameTemplate: claim-{username}{servername}
      volumeNameTemplate: volume-{username}{servername}
      storageAccessModes: [ReadWriteOnce]
  startTimeout: 300
  cpu:
    guarantee: 0.2
    limit: 4
  memory:
    guarantee: 1G
    limit: 8G
  extraResource:
    guarantees:
      mock: 3
    limits:
      mock: 1
  cmd: jupyterhub-singleuser
  defaultUrl: /

scheduling:
  userScheduler:
    enabled: true
    revisionHistoryLimit: 1
    replicas: 1
    logLevel: 10
    image: *image
    nodeSelector:
      node-type: mock
    tolerations:
      - key: mock-taint-key-scheduling
        operator: Equal
        value: mock-taint-value-scheduling
        effect: NoSchedule
    plugins:
      score:
        disabled:
          - name: PodTopologySpread
        enabled:
          - name: NodePreferAvoidPods
            weight: 161051
          - name: NodeAffinity
    pluginConfig:
      - name: NodeResourcesFit
        args:
          scoringStrategy:
            resources:
              - name: cpu
                weight: 1
            type: MostAllocated
    serviceAccount: *serviceAccount
    extraPodSpec: *extraPodSpec
  podPriority:
    enabled: true
  userPlaceholder:
    enabled: true
    revisionHistoryLimit: 1
    replicas: 1
    resources: *resources
  corePods:
    tolerations:
      - key: mock-taint-key-corePods
        operator: Equal
        value: mock-taint-value-corePods
        effect: NoSchedule
    nodeAffinity:
      matchNodePurpose: require
  userPods:
    tolerations:
      - key: mock-taint-key-userPods
        operator: Equal
        value: mock-taint-value-userPods
        effect: NoSchedule
    nodeAffinity:
      matchNodePurpose: require

prePuller:
  revisionHistoryLimit: 1
  extraTolerations:
    - key: mock-taint-key-prePuller
      operator: Equal
      value: mock-taint-value-prePuller
      effect: NoSchedule
  hook:
    enabled: true
    nodeSelector:
      node-type: mock
    tolerations:
      - key: mock-taint-key-hook
        operator: Equal
        value: mock-taint-value-hook
        effect: NoSchedule
    serviceAccount: *serviceAccount
  continuous:
    enabled: true
  extraImages:
    mockImage1:
      name: mock-user/mock-image1
      tag: mock-tag
    mockImage2:
      name: mock-user/mock-image2
      tag: mock-tag

ingress:
  enabled: true
  annotations: *annotations
  ingressClassName: mock-ingress-class-name
  hosts:
    - mocked1.domain.name
    - mocked2.domain.name
  pathSuffix: dummy-pathSuffix
  pathType: ImplementationSpecific
  tls:
    - secretName: jupyterhub-tls
      hosts:
        - mocked1.domain.name
        - mocked2.domain.name

cull:
  enabled: true
  users: true
  timeout: 3600
  every: 600
  concurrency: 10
  maxAge: 28800

debug:
  enabled: true

global:
  whatever:
    this-should-be-accepted: true

custom:
  myCustomStuff: [hello]
